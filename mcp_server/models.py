# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:09:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AddressAllocationId(RootModel[str]):
    root: str


class AddressAllocationIds(RootModel[List[AddressAllocationId]]):
    root: List[AddressAllocationId]


class AgreementId(
    RootModel[constr(pattern=r'^a-([0-9a-f]{17})$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^a-([0-9a-f]{17})$', min_length=19, max_length=19)


class AgreementStatusType(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class Arn(RootModel[constr(pattern=r'arn:.*', min_length=20, max_length=1600)]):
    root: constr(pattern=r'arn:.*', min_length=20, max_length=1600)


class As2Id(
    RootModel[constr(pattern=r'^[\p{Print}\s]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[\p{Print}\s]*', min_length=1, max_length=128)


class As2Transport(Enum):
    HTTP = 'HTTP'


class As2Transports(RootModel[List[As2Transport]]):
    root: List[As2Transport] = Field(..., max_length=1, min_length=1)


class CallbackToken(RootModel[constr(pattern=r'\w+', min_length=1, max_length=64)]):
    root: constr(pattern=r'\w+', min_length=1, max_length=64)


class CertDate(RootModel[datetime]):
    root: datetime


class CertSerial(
    RootModel[constr(pattern=r'^[\p{XDigit}{2}:?]*', min_length=0, max_length=48)]
):
    root: constr(pattern=r'^[\p{XDigit}{2}:?]*', min_length=0, max_length=48)


class Certificate(RootModel[constr(max_length=1600)]):
    root: constr(max_length=1600)


class CertificateBodyType(RootModel[SecretStr]):
    root: SecretStr


class CertificateChainType(RootModel[SecretStr]):
    root: SecretStr


class CertificateId(
    RootModel[constr(pattern=r'^cert-([0-9a-f]{17})$', min_length=22, max_length=22)]
):
    root: constr(pattern=r'^cert-([0-9a-f]{17})$', min_length=22, max_length=22)


class CertificateIds(RootModel[List[CertificateId]]):
    root: List[CertificateId]


class CertificateStatusType(Enum):
    ACTIVE = 'ACTIVE'
    PENDING_ROTATION = 'PENDING_ROTATION'
    INACTIVE = 'INACTIVE'


class CertificateType(Enum):
    CERTIFICATE = 'CERTIFICATE'
    CERTIFICATE_WITH_PRIVATE_KEY = 'CERTIFICATE_WITH_PRIVATE_KEY'


class CertificateUsageType(Enum):
    SIGNING = 'SIGNING'
    ENCRYPTION = 'ENCRYPTION'


class CompressionEnum(Enum):
    ZLIB = 'ZLIB'
    DISABLED = 'DISABLED'


class ConflictException(RootModel[Any]):
    root: Any


class ConnectorId(
    RootModel[constr(pattern=r'^c-([0-9a-f]{17})$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^c-([0-9a-f]{17})$', min_length=19, max_length=19)


class CreateAgreementResponse(BaseModel):
    AgreementId_1: AgreementId = Field(..., alias='AgreementId')


class CreateConnectorResponse(BaseModel):
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')


class CustomStepStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


class CustomStepTarget(
    RootModel[constr(pattern=r'arn:[a-z-]+:lambda:.*$', max_length=170)]
):
    root: constr(pattern=r'arn:[a-z-]+:lambda:.*$', max_length=170)


class CustomStepTimeoutSeconds(RootModel[conint(ge=1, le=1800)]):
    root: conint(ge=1, le=1800)


class DateImported(RootModel[datetime]):
    root: datetime


class DeleteCertificateRequest(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')


class DeleteConnectorRequest(BaseModel):
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')


class DescribeCertificateRequest(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')


class DescribeConnectorRequest(BaseModel):
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')


class Description(
    RootModel[constr(pattern=r'^[\p{Graph}]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[\p{Graph}]+', min_length=1, max_length=200)


class DirectoryId(
    RootModel[constr(pattern=r'^d-[0-9a-f]{10}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^d-[0-9a-f]{10}$', min_length=12, max_length=12)


class Domain(Enum):
    S3 = 'S3'
    EFS = 'EFS'


class EfsFileSystemId(
    RootModel[
        constr(
            pattern=r'^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$',
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$',
        max_length=128,
    )


class EfsPath(RootModel[constr(pattern=r'^[^\x00]+$', min_length=1, max_length=65536)]):
    root: constr(pattern=r'^[^\x00]+$', min_length=1, max_length=65536)


class EncryptionAlg(Enum):
    AES128_CBC = 'AES128_CBC'
    AES192_CBC = 'AES192_CBC'
    AES256_CBC = 'AES256_CBC'
    NONE = 'NONE'


class EncryptionType(Enum):
    PGP = 'PGP'


class EndpointType(Enum):
    PUBLIC = 'PUBLIC'
    VPC = 'VPC'
    VPC_ENDPOINT = 'VPC_ENDPOINT'


class ExecutionErrorMessage(RootModel[str]):
    root: str


class ExecutionErrorType(Enum):
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    CUSTOM_STEP_FAILED = 'CUSTOM_STEP_FAILED'
    THROTTLED = 'THROTTLED'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    NOT_FOUND = 'NOT_FOUND'
    BAD_REQUEST = 'BAD_REQUEST'
    TIMEOUT = 'TIMEOUT'
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'


class ExecutionId(
    RootModel[
        constr(
            pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
            min_length=36,
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$',
        min_length=36,
        max_length=36,
    )


class ExecutionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    EXCEPTION = 'EXCEPTION'
    HANDLING_EXCEPTION = 'HANDLING_EXCEPTION'


class ExternalId(
    RootModel[constr(pattern=r'^S-1-[\d-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^S-1-[\d-]+$', min_length=1, max_length=256)


class FilePath(RootModel[constr(pattern=r'^(.)+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^(.)+', min_length=1, max_length=1024)


class FilePaths(RootModel[List[FilePath]]):
    root: List[FilePath] = Field(..., max_length=10, min_length=1)


class Fips(RootModel[bool]):
    root: bool


class Function(
    RootModel[constr(pattern=r'^arn:[a-z-]+:lambda:.*$', min_length=1, max_length=170)]
):
    root: constr(pattern=r'^arn:[a-z-]+:lambda:.*$', min_length=1, max_length=170)


class HomeDirectory(RootModel[constr(pattern=r'^$|/.*', max_length=1024)]):
    root: constr(pattern=r'^$|/.*', max_length=1024)


class HomeDirectoryType(Enum):
    PATH = 'PATH'
    LOGICAL = 'LOGICAL'


class HostKey(RootModel[SecretStr]):
    root: SecretStr


class HostKeyDescription(
    RootModel[constr(pattern=r'^[\p{Print}]*$', min_length=0, max_length=200)]
):
    root: constr(pattern=r'^[\p{Print}]*$', min_length=0, max_length=200)


class HostKeyFingerprint(RootModel[str]):
    root: str


class HostKeyId(
    RootModel[constr(pattern=r'^hostkey-[0-9a-f]{17}$', min_length=25, max_length=25)]
):
    root: constr(pattern=r'^hostkey-[0-9a-f]{17}$', min_length=25, max_length=25)


class HostKeyType(RootModel[str]):
    root: str


class IdentityProviderType(Enum):
    SERVICE_MANAGED = 'SERVICE_MANAGED'
    API_GATEWAY = 'API_GATEWAY'
    AWS_DIRECTORY_SERVICE = 'AWS_DIRECTORY_SERVICE'
    AWS_LAMBDA = 'AWS_LAMBDA'


class ImportCertificateResponse(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')


class InternalServiceError(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class ListedCertificate(BaseModel):
    ActiveDate: Optional[CertDate] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CertificateId_1: Optional[CertificateId] = Field(None, alias='CertificateId')
    Description_1: Optional[Description] = Field(None, alias='Description')
    InactiveDate: Optional[CertDate] = None
    Status: Optional[CertificateStatusType] = None
    Type: Optional[CertificateType] = None
    Usage: Optional[CertificateUsageType] = None


class ListedCertificates(RootModel[List[ListedCertificate]]):
    root: List[ListedCertificate]


class ListedHostKey(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    DateImported_1: Optional[DateImported] = Field(None, alias='DateImported')
    Description: Optional[HostKeyDescription] = None
    Fingerprint: Optional[HostKeyFingerprint] = None
    HostKeyId_1: Optional[HostKeyId] = Field(None, alias='HostKeyId')
    Type: Optional[HostKeyType] = None


class ListedHostKeys(RootModel[List[ListedHostKey]]):
    root: List[ListedHostKey]


class LogGroupName(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]*', min_length=1, max_length=512)


class MapEntry(RootModel[constr(pattern=r'^/.*', max_length=1024)]):
    root: constr(pattern=r'^/.*', max_length=1024)


class MapTarget(RootModel[constr(pattern=r'^/.*', max_length=1024)]):
    root: constr(pattern=r'^/.*', max_length=1024)


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MdnResponse(Enum):
    SYNC = 'SYNC'
    NONE = 'NONE'


class MdnSigningAlg(Enum):
    SHA256 = 'SHA256'
    SHA384 = 'SHA384'
    SHA512 = 'SHA512'
    SHA1 = 'SHA1'
    NONE = 'NONE'
    DEFAULT = 'DEFAULT'


class Message(RootModel[str]):
    root: str


class MessageSubject(
    RootModel[constr(pattern=r'^[\p{Print}\p{Blank}]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^[\p{Print}\p{Blank}]+', min_length=1, max_length=1024)


class NextToken(RootModel[constr(min_length=1, max_length=6144)]):
    root: constr(min_length=1, max_length=6144)


class NullableRole(RootModel[constr(pattern=r'^$|arn:.*role/.*', max_length=2048)]):
    root: constr(pattern=r'^$|arn:.*role/.*', max_length=2048)


class OverwriteExisting(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'


class PassiveIp(RootModel[constr(max_length=15)]):
    root: constr(max_length=15)


class Policy(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class PosixId(RootModel[conint(ge=0, le=4294967295)]):
    root: conint(ge=0, le=4294967295)


class PostAuthenticationLoginBanner(
    RootModel[constr(pattern=r'[\x09-\x0D\x20-\x7E]*', max_length=512)]
):
    root: constr(pattern=r'[\x09-\x0D\x20-\x7E]*', max_length=512)


class PreAuthenticationLoginBanner(
    RootModel[constr(pattern=r'[\x09-\x0D\x20-\x7E]*', max_length=512)]
):
    root: constr(pattern=r'[\x09-\x0D\x20-\x7E]*', max_length=512)


class PrivateKeyType(RootModel[SecretStr]):
    root: SecretStr


class ProfileId(
    RootModel[constr(pattern=r'^p-([0-9a-f]{17})$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^p-([0-9a-f]{17})$', min_length=19, max_length=19)


class ProfileType(Enum):
    LOCAL = 'LOCAL'
    PARTNER = 'PARTNER'


class Protocol(Enum):
    SFTP = 'SFTP'
    FTP = 'FTP'
    FTPS = 'FTPS'
    AS2 = 'AS2'


class Protocols(RootModel[List[Protocol]]):
    root: List[Protocol] = Field(..., max_length=4, min_length=1)


class ResourceExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class Response(RootModel[str]):
    root: str


class Role(RootModel[constr(pattern=r'arn:.*role/.*', min_length=20, max_length=2048)]):
    root: constr(pattern=r'arn:.*role/.*', min_length=20, max_length=2048)


class S3Bucket(
    RootModel[
        constr(
            pattern=r'^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$', min_length=3, max_length=63
    )


class S3Etag(RootModel[constr(pattern=r'^.+$', min_length=1, max_length=65536)]):
    root: constr(pattern=r'^.+$', min_length=1, max_length=65536)


class S3Key(RootModel[constr(pattern=r'[\P{M}\p{M}]*', max_length=1024)]):
    root: constr(pattern=r'[\P{M}\p{M}]*', max_length=1024)


class S3TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class S3TagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class S3VersionId(RootModel[constr(pattern=r'^.+$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^.+$', min_length=1, max_length=1024)


class SecondaryGids(RootModel[List[PosixId]]):
    root: List[PosixId] = Field(..., max_length=16, min_length=0)


class SecurityGroupId(
    RootModel[constr(pattern=r'^sg-[0-9a-f]{8,17}$', min_length=11, max_length=20)]
):
    root: constr(pattern=r'^sg-[0-9a-f]{8,17}$', min_length=11, max_length=20)


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SecurityPolicyName(
    RootModel[constr(pattern=r'TransferSecurityPolicy-.+', max_length=100)]
):
    root: constr(pattern=r'TransferSecurityPolicy-.+', max_length=100)


class SecurityPolicyNames(RootModel[List[SecurityPolicyName]]):
    root: List[SecurityPolicyName]


class SecurityPolicyOption(RootModel[constr(max_length=50)]):
    root: constr(max_length=50)


class SecurityPolicyOptions(RootModel[List[SecurityPolicyOption]]):
    root: List[SecurityPolicyOption]


class SendWorkflowStepStateResponse(BaseModel):
    pass


class ServerId(
    RootModel[constr(pattern=r'^s-([0-9a-f]{17})$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^s-([0-9a-f]{17})$', min_length=19, max_length=19)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SessionId(RootModel[constr(pattern=r'^[\w-]*$', min_length=3, max_length=32)]):
    root: constr(pattern=r'^[\w-]*$', min_length=3, max_length=32)


class SetStatOption(Enum):
    DEFAULT = 'DEFAULT'
    ENABLE_NO_OP = 'ENABLE_NO_OP'


class SigningAlg(Enum):
    SHA256 = 'SHA256'
    SHA384 = 'SHA384'
    SHA512 = 'SHA512'
    SHA1 = 'SHA1'
    NONE = 'NONE'


class SourceFileLocation(
    RootModel[constr(pattern=r'^\$\{(\w+.)+\w+\}$', max_length=256)]
):
    root: constr(pattern=r'^\$\{(\w+.)+\w+\}$', max_length=256)


class SourceIp(
    RootModel[constr(pattern=r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', max_length=32)]
):
    root: constr(pattern=r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', max_length=32)


class SshPublicKeyBody(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class SshPublicKeyCount(RootModel[int]):
    root: int


class SshPublicKeyId(
    RootModel[constr(pattern=r'^key-[0-9a-f]{17}$', min_length=21, max_length=21)]
):
    root: constr(pattern=r'^key-[0-9a-f]{17}$', min_length=21, max_length=21)


class StartFileTransferRequest(BaseModel):
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')
    SendFilePaths: FilePaths


class StartServerRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class State(Enum):
    OFFLINE = 'OFFLINE'
    ONLINE = 'ONLINE'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    START_FAILED = 'START_FAILED'
    STOP_FAILED = 'STOP_FAILED'


class StatusCode(RootModel[int]):
    root: int


class StepResultOutputsJson(RootModel[constr(max_length=65536)]):
    root: constr(max_length=65536)


class StopServerRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class SubnetId(RootModel[str]):
    root: str


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class TagKey(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class TlsSessionResumptionMode(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    ENFORCED = 'ENFORCED'


class TransferId(
    RootModel[constr(pattern=r'^[0-9a-zA-Z./-]+$', min_length=1, max_length=512)]
):
    root: constr(pattern=r'^[0-9a-zA-Z./-]+$', min_length=1, max_length=512)


class UntagResourceRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UpdateAccessResponse(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class UpdateAgreementRequest(BaseModel):
    AccessRole: Optional[Role] = None
    AgreementId_1: AgreementId = Field(..., alias='AgreementId')
    BaseDirectory: Optional[HomeDirectory] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    LocalProfileId: Optional[ProfileId] = None
    PartnerProfileId: Optional[ProfileId] = None
    ServerId_1: ServerId = Field(..., alias='ServerId')
    Status: Optional[AgreementStatusType] = None


class UpdateAgreementResponse(BaseModel):
    AgreementId_1: AgreementId = Field(..., alias='AgreementId')


class UpdateCertificateRequest(BaseModel):
    ActiveDate: Optional[CertDate] = None
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')
    Description_1: Optional[Description] = Field(None, alias='Description')
    InactiveDate: Optional[CertDate] = None


class UpdateCertificateResponse(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')


class UpdateConnectorResponse(BaseModel):
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')


class UpdateHostKeyRequest(BaseModel):
    Description: HostKeyDescription
    HostKeyId_1: HostKeyId = Field(..., alias='HostKeyId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class UpdateHostKeyResponse(BaseModel):
    HostKeyId_1: HostKeyId = Field(..., alias='HostKeyId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class UpdateProfileRequest(BaseModel):
    CertificateIds_1: Optional[CertificateIds] = Field(None, alias='CertificateIds')
    ProfileId_1: ProfileId = Field(..., alias='ProfileId')


class UpdateProfileResponse(BaseModel):
    ProfileId_1: ProfileId = Field(..., alias='ProfileId')


class UpdateServerResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class Url(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class UserCount(RootModel[int]):
    root: int


class UserName(
    RootModel[constr(pattern=r'^[\w][\w@.-]{2,99}$', min_length=3, max_length=100)]
):
    root: constr(pattern=r'^[\w][\w@.-]{2,99}$', min_length=3, max_length=100)


class UserPassword(RootModel[SecretStr]):
    root: SecretStr


class VpcEndpointId(
    RootModel[constr(pattern=r'^vpce-[0-9a-f]{17}$', min_length=22, max_length=22)]
):
    root: constr(pattern=r'^vpce-[0-9a-f]{17}$', min_length=22, max_length=22)


class VpcId(RootModel[str]):
    root: str


class WorkflowDescription(RootModel[constr(pattern=r'^[\w- ]*$', max_length=256)]):
    root: constr(pattern=r'^[\w- ]*$', max_length=256)


class WorkflowId(
    RootModel[constr(pattern=r'^w-([a-z0-9]{17})$', min_length=19, max_length=19)]
):
    root: constr(pattern=r'^w-([a-z0-9]{17})$', min_length=19, max_length=19)


class WorkflowStepName(RootModel[constr(pattern=r'^[\w-]*$', max_length=30)]):
    root: constr(pattern=r'^[\w-]*$', max_length=30)


class WorkflowStepType(Enum):
    COPY = 'COPY'
    CUSTOM = 'CUSTOM'
    TAG = 'TAG'
    DELETE = 'DELETE'
    DECRYPT = 'DECRYPT'


class XAmzTarget(Enum):
    TransferService_CreateAccess = 'TransferService.CreateAccess'


class XAmzTarget1(Enum):
    TransferService_CreateAgreement = 'TransferService.CreateAgreement'


class XAmzTarget2(Enum):
    TransferService_CreateConnector = 'TransferService.CreateConnector'


class XAmzTarget3(Enum):
    TransferService_CreateProfile = 'TransferService.CreateProfile'


class XAmzTarget4(Enum):
    TransferService_CreateServer = 'TransferService.CreateServer'


class XAmzTarget5(Enum):
    TransferService_CreateUser = 'TransferService.CreateUser'


class XAmzTarget6(Enum):
    TransferService_CreateWorkflow = 'TransferService.CreateWorkflow'


class XAmzTarget7(Enum):
    TransferService_DeleteAccess = 'TransferService.DeleteAccess'


class XAmzTarget8(Enum):
    TransferService_DeleteAgreement = 'TransferService.DeleteAgreement'


class XAmzTarget9(Enum):
    TransferService_DeleteCertificate = 'TransferService.DeleteCertificate'


class XAmzTarget10(Enum):
    TransferService_DeleteConnector = 'TransferService.DeleteConnector'


class XAmzTarget11(Enum):
    TransferService_DeleteHostKey = 'TransferService.DeleteHostKey'


class XAmzTarget12(Enum):
    TransferService_DeleteProfile = 'TransferService.DeleteProfile'


class XAmzTarget13(Enum):
    TransferService_DeleteServer = 'TransferService.DeleteServer'


class XAmzTarget14(Enum):
    TransferService_DeleteSshPublicKey = 'TransferService.DeleteSshPublicKey'


class XAmzTarget15(Enum):
    TransferService_DeleteUser = 'TransferService.DeleteUser'


class XAmzTarget16(Enum):
    TransferService_DeleteWorkflow = 'TransferService.DeleteWorkflow'


class XAmzTarget17(Enum):
    TransferService_DescribeAccess = 'TransferService.DescribeAccess'


class XAmzTarget18(Enum):
    TransferService_DescribeAgreement = 'TransferService.DescribeAgreement'


class XAmzTarget19(Enum):
    TransferService_DescribeCertificate = 'TransferService.DescribeCertificate'


class XAmzTarget20(Enum):
    TransferService_DescribeConnector = 'TransferService.DescribeConnector'


class XAmzTarget21(Enum):
    TransferService_DescribeExecution = 'TransferService.DescribeExecution'


class XAmzTarget22(Enum):
    TransferService_DescribeHostKey = 'TransferService.DescribeHostKey'


class XAmzTarget23(Enum):
    TransferService_DescribeProfile = 'TransferService.DescribeProfile'


class XAmzTarget24(Enum):
    TransferService_DescribeSecurityPolicy = 'TransferService.DescribeSecurityPolicy'


class XAmzTarget25(Enum):
    TransferService_DescribeServer = 'TransferService.DescribeServer'


class XAmzTarget26(Enum):
    TransferService_DescribeUser = 'TransferService.DescribeUser'


class XAmzTarget27(Enum):
    TransferService_DescribeWorkflow = 'TransferService.DescribeWorkflow'


class XAmzTarget28(Enum):
    TransferService_ImportCertificate = 'TransferService.ImportCertificate'


class XAmzTarget29(Enum):
    TransferService_ImportHostKey = 'TransferService.ImportHostKey'


class XAmzTarget30(Enum):
    TransferService_ImportSshPublicKey = 'TransferService.ImportSshPublicKey'


class XAmzTarget31(Enum):
    TransferService_ListAccesses = 'TransferService.ListAccesses'


class XAmzTarget32(Enum):
    TransferService_ListAgreements = 'TransferService.ListAgreements'


class XAmzTarget33(Enum):
    TransferService_ListCertificates = 'TransferService.ListCertificates'


class XAmzTarget34(Enum):
    TransferService_ListConnectors = 'TransferService.ListConnectors'


class XAmzTarget35(Enum):
    TransferService_ListExecutions = 'TransferService.ListExecutions'


class XAmzTarget36(Enum):
    TransferService_ListHostKeys = 'TransferService.ListHostKeys'


class XAmzTarget37(Enum):
    TransferService_ListProfiles = 'TransferService.ListProfiles'


class XAmzTarget38(Enum):
    TransferService_ListSecurityPolicies = 'TransferService.ListSecurityPolicies'


class XAmzTarget39(Enum):
    TransferService_ListServers = 'TransferService.ListServers'


class XAmzTarget40(Enum):
    TransferService_ListTagsForResource = 'TransferService.ListTagsForResource'


class XAmzTarget41(Enum):
    TransferService_ListUsers = 'TransferService.ListUsers'


class XAmzTarget42(Enum):
    TransferService_ListWorkflows = 'TransferService.ListWorkflows'


class XAmzTarget43(Enum):
    TransferService_SendWorkflowStepState = 'TransferService.SendWorkflowStepState'


class XAmzTarget44(Enum):
    TransferService_StartFileTransfer = 'TransferService.StartFileTransfer'


class XAmzTarget45(Enum):
    TransferService_StartServer = 'TransferService.StartServer'


class XAmzTarget46(Enum):
    TransferService_StopServer = 'TransferService.StopServer'


class XAmzTarget47(Enum):
    TransferService_TagResource = 'TransferService.TagResource'


class XAmzTarget48(Enum):
    TransferService_TestIdentityProvider = 'TransferService.TestIdentityProvider'


class XAmzTarget49(Enum):
    TransferService_UntagResource = 'TransferService.UntagResource'


class XAmzTarget50(Enum):
    TransferService_UpdateAccess = 'TransferService.UpdateAccess'


class XAmzTarget51(Enum):
    TransferService_UpdateAgreement = 'TransferService.UpdateAgreement'


class XAmzTarget52(Enum):
    TransferService_UpdateCertificate = 'TransferService.UpdateCertificate'


class XAmzTarget53(Enum):
    TransferService_UpdateConnector = 'TransferService.UpdateConnector'


class XAmzTarget54(Enum):
    TransferService_UpdateHostKey = 'TransferService.UpdateHostKey'


class XAmzTarget55(Enum):
    TransferService_UpdateProfile = 'TransferService.UpdateProfile'


class XAmzTarget56(Enum):
    TransferService_UpdateServer = 'TransferService.UpdateServer'


class XAmzTarget57(Enum):
    TransferService_UpdateUser = 'TransferService.UpdateUser'


class As2ConnectorConfig(BaseModel):
    Compression: Optional[CompressionEnum] = None
    EncryptionAlgorithm: Optional[EncryptionAlg] = None
    LocalProfileId: Optional[ProfileId] = None
    MdnResponse_1: Optional[MdnResponse] = Field(None, alias='MdnResponse')
    MdnSigningAlgorithm: Optional[MdnSigningAlg] = None
    MessageSubject_1: Optional[MessageSubject] = Field(None, alias='MessageSubject')
    PartnerProfileId: Optional[ProfileId] = None
    SigningAlgorithm: Optional[SigningAlg] = None


class CreateAccessResponse(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class CreateProfileResponse(BaseModel):
    ProfileId_1: ProfileId = Field(..., alias='ProfileId')


class CreateServerResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class CreateUserResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    UserName_1: UserName = Field(..., alias='UserName')


class CreateWorkflowResponse(BaseModel):
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class CustomStepDetails(BaseModel):
    Name: Optional[WorkflowStepName] = None
    SourceFileLocation_1: Optional[SourceFileLocation] = Field(
        None, alias='SourceFileLocation'
    )
    Target: Optional[CustomStepTarget] = None
    TimeoutSeconds: Optional[CustomStepTimeoutSeconds] = None


class DeleteAccessRequest(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DeleteAgreementRequest(BaseModel):
    AgreementId_1: AgreementId = Field(..., alias='AgreementId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DeleteHostKeyRequest(BaseModel):
    HostKeyId_1: HostKeyId = Field(..., alias='HostKeyId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DeleteProfileRequest(BaseModel):
    ProfileId_1: ProfileId = Field(..., alias='ProfileId')


class DeleteServerRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DeleteSshPublicKeyRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    SshPublicKeyId_1: SshPublicKeyId = Field(..., alias='SshPublicKeyId')
    UserName_1: UserName = Field(..., alias='UserName')


class DeleteStepDetails(BaseModel):
    Name: Optional[WorkflowStepName] = None
    SourceFileLocation_1: Optional[SourceFileLocation] = Field(
        None, alias='SourceFileLocation'
    )


class DeleteUserRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    UserName_1: UserName = Field(..., alias='UserName')


class DeleteWorkflowRequest(BaseModel):
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class DescribeAccessRequest(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DescribeAgreementRequest(BaseModel):
    AgreementId_1: AgreementId = Field(..., alias='AgreementId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DescribeExecutionRequest(BaseModel):
    ExecutionId_1: ExecutionId = Field(..., alias='ExecutionId')
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class DescribeHostKeyRequest(BaseModel):
    HostKeyId_1: HostKeyId = Field(..., alias='HostKeyId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DescribeProfileRequest(BaseModel):
    ProfileId_1: ProfileId = Field(..., alias='ProfileId')


class DescribeSecurityPolicyRequest(BaseModel):
    SecurityPolicyName_1: SecurityPolicyName = Field(..., alias='SecurityPolicyName')


class DescribeServerRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DescribeUserRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    UserName_1: UserName = Field(..., alias='UserName')


class DescribeWorkflowRequest(BaseModel):
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class DescribedSecurityPolicy(BaseModel):
    Fips_1: Optional[Fips] = Field(None, alias='Fips')
    SecurityPolicyName_1: SecurityPolicyName = Field(..., alias='SecurityPolicyName')
    SshCiphers: Optional[SecurityPolicyOptions] = None
    SshKexs: Optional[SecurityPolicyOptions] = None
    SshMacs: Optional[SecurityPolicyOptions] = None
    TlsCiphers: Optional[SecurityPolicyOptions] = None


class EfsFileLocation(BaseModel):
    FileSystemId: Optional[EfsFileSystemId] = None
    Path: Optional[EfsPath] = None


class EndpointDetails(BaseModel):
    AddressAllocationIds_1: Optional[AddressAllocationIds] = Field(
        None, alias='AddressAllocationIds'
    )
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class ExecutionError(BaseModel):
    Message: ExecutionErrorMessage
    Type: ExecutionErrorType


class ExecutionStepResult(BaseModel):
    Error: Optional[ExecutionError] = None
    Outputs: Optional[StepResultOutputsJson] = None
    StepType: Optional[WorkflowStepType] = None


class ExecutionStepResults(RootModel[List[ExecutionStepResult]]):
    root: List[ExecutionStepResult] = Field(..., max_length=50, min_length=1)


class HomeDirectoryMapEntry(BaseModel):
    Entry: MapEntry
    Target: MapTarget


class HomeDirectoryMappings(RootModel[List[HomeDirectoryMapEntry]]):
    root: List[HomeDirectoryMapEntry] = Field(..., max_length=50, min_length=1)


class IdentityProviderDetails(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Function_1: Optional[Function] = Field(None, alias='Function')
    InvocationRole: Optional[Role] = None
    Url_1: Optional[Url] = Field(None, alias='Url')


class ImportHostKeyResponse(BaseModel):
    HostKeyId_1: HostKeyId = Field(..., alias='HostKeyId')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ImportSshPublicKeyRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    SshPublicKeyBody_1: SshPublicKeyBody = Field(..., alias='SshPublicKeyBody')
    UserName_1: UserName = Field(..., alias='UserName')


class ImportSshPublicKeyResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    SshPublicKeyId_1: SshPublicKeyId = Field(..., alias='SshPublicKeyId')
    UserName_1: UserName = Field(..., alias='UserName')


class ListAccessesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListAgreementsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListCertificatesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCertificatesResponse(BaseModel):
    Certificates: ListedCertificates
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConnectorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExecutionsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class ListHostKeysRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListHostKeysResponse(BaseModel):
    HostKeys: ListedHostKeys
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListProfilesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ProfileType_1: Optional[ProfileType] = Field(None, alias='ProfileType')


class ListSecurityPoliciesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSecurityPoliciesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SecurityPolicyNames_1: SecurityPolicyNames = Field(..., alias='SecurityPolicyNames')


class ListServersRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListUsersRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListWorkflowsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListedAccess(BaseModel):
    ExternalId_1: Optional[ExternalId] = Field(None, alias='ExternalId')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Role_1: Optional[Role] = Field(None, alias='Role')


class ListedAccesses(RootModel[List[ListedAccess]]):
    root: List[ListedAccess]


class ListedAgreement(BaseModel):
    AgreementId_1: Optional[AgreementId] = Field(None, alias='AgreementId')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description_1: Optional[Description] = Field(None, alias='Description')
    LocalProfileId: Optional[ProfileId] = None
    PartnerProfileId: Optional[ProfileId] = None
    ServerId_1: Optional[ServerId] = Field(None, alias='ServerId')
    Status: Optional[AgreementStatusType] = None


class ListedAgreements(RootModel[List[ListedAgreement]]):
    root: List[ListedAgreement]


class ListedConnector(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ConnectorId_1: Optional[ConnectorId] = Field(None, alias='ConnectorId')
    Url_1: Optional[Url] = Field(None, alias='Url')


class ListedConnectors(RootModel[List[ListedConnector]]):
    root: List[ListedConnector]


class ListedProfile(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    As2Id_1: Optional[As2Id] = Field(None, alias='As2Id')
    ProfileId_1: Optional[ProfileId] = Field(None, alias='ProfileId')
    ProfileType_1: Optional[ProfileType] = Field(None, alias='ProfileType')


class ListedProfiles(RootModel[List[ListedProfile]]):
    root: List[ListedProfile]


class ListedServer(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Domain_1: Optional[Domain] = Field(None, alias='Domain')
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    IdentityProviderType_1: Optional[IdentityProviderType] = Field(
        None, alias='IdentityProviderType'
    )
    LoggingRole: Optional[Role] = None
    ServerId_1: Optional[ServerId] = Field(None, alias='ServerId')
    State_1: Optional[State] = Field(None, alias='State')
    UserCount_1: Optional[UserCount] = Field(None, alias='UserCount')


class ListedServers(RootModel[List[ListedServer]]):
    root: List[ListedServer]


class ListedUser(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Role_1: Optional[Role] = Field(None, alias='Role')
    SshPublicKeyCount_1: Optional[SshPublicKeyCount] = Field(
        None, alias='SshPublicKeyCount'
    )
    UserName_1: Optional[UserName] = Field(None, alias='UserName')


class ListedUsers(RootModel[List[ListedUser]]):
    root: List[ListedUser]


class ListedWorkflow(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[WorkflowDescription] = None
    WorkflowId_1: Optional[WorkflowId] = Field(None, alias='WorkflowId')


class ListedWorkflows(RootModel[List[ListedWorkflow]]):
    root: List[ListedWorkflow]


class LoggingConfiguration(BaseModel):
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    LoggingRole: Optional[Role] = None


class PosixProfile(BaseModel):
    Gid: PosixId
    SecondaryGids_1: Optional[SecondaryGids] = Field(None, alias='SecondaryGids')
    Uid: PosixId


class ProtocolDetails(BaseModel):
    As2Transports_1: Optional[As2Transports] = Field(None, alias='As2Transports')
    PassiveIp_1: Optional[PassiveIp] = Field(None, alias='PassiveIp')
    SetStatOption_1: Optional[SetStatOption] = Field(None, alias='SetStatOption')
    TlsSessionResumptionMode_1: Optional[TlsSessionResumptionMode] = Field(
        None, alias='TlsSessionResumptionMode'
    )


class S3FileLocation(BaseModel):
    Bucket: Optional[S3Bucket] = None
    Etag: Optional[S3Etag] = None
    Key: Optional[S3Key] = None
    VersionId: Optional[S3VersionId] = None


class S3InputFileLocation(BaseModel):
    Bucket: Optional[S3Bucket] = None
    Key: Optional[S3Key] = None


class S3Tag(BaseModel):
    Key: S3TagKey
    Value: S3TagValue


class S3Tags(RootModel[List[S3Tag]]):
    root: List[S3Tag] = Field(..., max_length=10, min_length=1)


class SendWorkflowStepStateRequest(BaseModel):
    ExecutionId_1: ExecutionId = Field(..., alias='ExecutionId')
    Status: CustomStepStatus
    Token: CallbackToken
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class SshPublicKey(BaseModel):
    DateImported_1: DateImported = Field(..., alias='DateImported')
    SshPublicKeyBody_1: SshPublicKeyBody = Field(..., alias='SshPublicKeyBody')
    SshPublicKeyId_1: SshPublicKeyId = Field(..., alias='SshPublicKeyId')


class SshPublicKeys(RootModel[List[SshPublicKey]]):
    root: List[SshPublicKey] = Field(..., max_length=5)


class StartFileTransferResponse(BaseModel):
    TransferId_1: TransferId = Field(..., alias='TransferId')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagStepDetails(BaseModel):
    Name: Optional[WorkflowStepName] = None
    SourceFileLocation_1: Optional[SourceFileLocation] = Field(
        None, alias='SourceFileLocation'
    )
    Tags: Optional[S3Tags] = None


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class TestIdentityProviderRequest(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    ServerProtocol: Optional[Protocol] = None
    SourceIp_1: Optional[SourceIp] = Field(None, alias='SourceIp')
    UserName_1: UserName = Field(..., alias='UserName')
    UserPassword_1: Optional[UserPassword] = Field(None, alias='UserPassword')


class TestIdentityProviderResponse(BaseModel):
    Message_1: Optional[Message] = Field(None, alias='Message')
    Response_1: Optional[Response] = Field(None, alias='Response')
    StatusCode_1: StatusCode = Field(..., alias='StatusCode')
    Url_1: Url = Field(..., alias='Url')


class UpdateAccessRequest(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Optional[Role] = Field(None, alias='Role')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class UpdateConnectorRequest(BaseModel):
    AccessRole: Optional[Role] = None
    As2Config: Optional[As2ConnectorConfig] = None
    ConnectorId_1: ConnectorId = Field(..., alias='ConnectorId')
    LoggingRole: Optional[Role] = None
    Url_1: Optional[Url] = Field(None, alias='Url')


class UpdateUserRequest(BaseModel):
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Optional[Role] = Field(None, alias='Role')
    ServerId_1: ServerId = Field(..., alias='ServerId')
    UserName_1: UserName = Field(..., alias='UserName')


class UpdateUserResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    UserName_1: UserName = Field(..., alias='UserName')


class UserDetails(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    SessionId_1: Optional[SessionId] = Field(None, alias='SessionId')
    UserName_1: UserName = Field(..., alias='UserName')


class WorkflowDetail(BaseModel):
    ExecutionRole: Role
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class CreateAccessRequest(BaseModel):
    ExternalId_1: ExternalId = Field(..., alias='ExternalId')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Role = Field(..., alias='Role')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class CreateAgreementRequest(BaseModel):
    AccessRole: Role
    BaseDirectory: HomeDirectory
    Description_1: Optional[Description] = Field(None, alias='Description')
    LocalProfileId: ProfileId
    PartnerProfileId: ProfileId
    ServerId_1: ServerId = Field(..., alias='ServerId')
    Status: Optional[AgreementStatusType] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateConnectorRequest(BaseModel):
    AccessRole: Role
    As2Config: As2ConnectorConfig
    LoggingRole: Optional[Role] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Url_1: Url = Field(..., alias='Url')


class CreateProfileRequest(BaseModel):
    As2Id_1: As2Id = Field(..., alias='As2Id')
    CertificateIds_1: Optional[CertificateIds] = Field(None, alias='CertificateIds')
    ProfileType_1: ProfileType = Field(..., alias='ProfileType')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateUserRequest(BaseModel):
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Role = Field(..., alias='Role')
    ServerId_1: ServerId = Field(..., alias='ServerId')
    SshPublicKeyBody_1: Optional[SshPublicKeyBody] = Field(
        None, alias='SshPublicKeyBody'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UserName_1: UserName = Field(..., alias='UserName')


class DescribeSecurityPolicyResponse(BaseModel):
    SecurityPolicy: DescribedSecurityPolicy


class DescribedAccess(BaseModel):
    ExternalId_1: Optional[ExternalId] = Field(None, alias='ExternalId')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Optional[Role] = Field(None, alias='Role')


class DescribedAgreement(BaseModel):
    AccessRole: Optional[Role] = None
    AgreementId_1: Optional[AgreementId] = Field(None, alias='AgreementId')
    Arn_1: Arn = Field(..., alias='Arn')
    BaseDirectory: Optional[HomeDirectory] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    LocalProfileId: Optional[ProfileId] = None
    PartnerProfileId: Optional[ProfileId] = None
    ServerId_1: Optional[ServerId] = Field(None, alias='ServerId')
    Status: Optional[AgreementStatusType] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribedCertificate(BaseModel):
    ActiveDate: Optional[CertDate] = None
    Arn_1: Arn = Field(..., alias='Arn')
    Certificate: Optional[CertificateBodyType] = None
    CertificateChain: Optional[CertificateChainType] = None
    CertificateId_1: Optional[CertificateId] = Field(None, alias='CertificateId')
    Description_1: Optional[Description] = Field(None, alias='Description')
    InactiveDate: Optional[CertDate] = None
    NotAfterDate: Optional[CertDate] = None
    NotBeforeDate: Optional[CertDate] = None
    Serial: Optional[CertSerial] = None
    Status: Optional[CertificateStatusType] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[CertificateType] = None
    Usage: Optional[CertificateUsageType] = None


class DescribedConnector(BaseModel):
    AccessRole: Optional[Role] = None
    Arn_1: Arn = Field(..., alias='Arn')
    As2Config: Optional[As2ConnectorConfig] = None
    ConnectorId_1: Optional[ConnectorId] = Field(None, alias='ConnectorId')
    LoggingRole: Optional[Role] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Url_1: Optional[Url] = Field(None, alias='Url')


class DescribedHostKey(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    DateImported_1: Optional[DateImported] = Field(None, alias='DateImported')
    Description: Optional[HostKeyDescription] = None
    HostKeyFingerprint_1: Optional[HostKeyFingerprint] = Field(
        None, alias='HostKeyFingerprint'
    )
    HostKeyId_1: Optional[HostKeyId] = Field(None, alias='HostKeyId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[HostKeyType] = None


class DescribedProfile(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    As2Id_1: Optional[As2Id] = Field(None, alias='As2Id')
    CertificateIds_1: Optional[CertificateIds] = Field(None, alias='CertificateIds')
    ProfileId_1: Optional[ProfileId] = Field(None, alias='ProfileId')
    ProfileType_1: Optional[ProfileType] = Field(None, alias='ProfileType')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribedUser(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    HomeDirectory_1: Optional[HomeDirectory] = Field(None, alias='HomeDirectory')
    HomeDirectoryMappings_1: Optional[HomeDirectoryMappings] = Field(
        None, alias='HomeDirectoryMappings'
    )
    HomeDirectoryType_1: Optional[HomeDirectoryType] = Field(
        None, alias='HomeDirectoryType'
    )
    Policy_1: Optional[Policy] = Field(None, alias='Policy')
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Role_1: Optional[Role] = Field(None, alias='Role')
    SshPublicKeys_1: Optional[SshPublicKeys] = Field(None, alias='SshPublicKeys')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UserName_1: Optional[UserName] = Field(None, alias='UserName')


class ExecutionResults(BaseModel):
    OnExceptionSteps: Optional[ExecutionStepResults] = None
    Steps: Optional[ExecutionStepResults] = None


class FileLocation(BaseModel):
    EfsFileLocation_1: Optional[EfsFileLocation] = Field(None, alias='EfsFileLocation')
    S3FileLocation_1: Optional[S3FileLocation] = Field(None, alias='S3FileLocation')


class ImportCertificateRequest(BaseModel):
    ActiveDate: Optional[CertDate] = None
    Certificate: CertificateBodyType
    CertificateChain: Optional[CertificateChainType] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    InactiveDate: Optional[CertDate] = None
    PrivateKey: Optional[PrivateKeyType] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Usage: CertificateUsageType


class ImportHostKeyRequest(BaseModel):
    Description: Optional[HostKeyDescription] = None
    HostKeyBody: HostKey
    ServerId_1: ServerId = Field(..., alias='ServerId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class InputFileLocation(BaseModel):
    EfsFileLocation_1: Optional[EfsFileLocation] = Field(None, alias='EfsFileLocation')
    S3FileLocation: Optional[S3InputFileLocation] = None


class ListAccessesResponse(BaseModel):
    Accesses: ListedAccesses
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')


class ListAgreementsResponse(BaseModel):
    Agreements: ListedAgreements
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConnectorsResponse(BaseModel):
    Connectors: ListedConnectors
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListProfilesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Profiles: ListedProfiles


class ListServersResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Servers: ListedServers


class ListTagsForResourceResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ListUsersResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerId_1: ServerId = Field(..., alias='ServerId')
    Users: ListedUsers


class ListWorkflowsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Workflows: ListedWorkflows


class OnPartialUploadWorkflowDetails(RootModel[List[WorkflowDetail]]):
    root: List[WorkflowDetail] = Field(..., max_length=1)


class OnUploadWorkflowDetails(RootModel[List[WorkflowDetail]]):
    root: List[WorkflowDetail] = Field(..., max_length=1)


class ServiceMetadata(BaseModel):
    UserDetails_1: UserDetails = Field(..., alias='UserDetails')


class TagResourceRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Tags_1: Tags = Field(..., alias='Tags')


class WorkflowDetails(BaseModel):
    OnPartialUpload: Optional[OnPartialUploadWorkflowDetails] = None
    OnUpload: Optional[OnUploadWorkflowDetails] = None


class CopyStepDetails(BaseModel):
    DestinationFileLocation: Optional[InputFileLocation] = None
    Name: Optional[WorkflowStepName] = None
    OverwriteExisting_1: Optional[OverwriteExisting] = Field(
        None, alias='OverwriteExisting'
    )
    SourceFileLocation_1: Optional[SourceFileLocation] = Field(
        None, alias='SourceFileLocation'
    )


class CreateServerRequest(BaseModel):
    Certificate_1: Optional[Certificate] = Field(None, alias='Certificate')
    Domain_1: Optional[Domain] = Field(None, alias='Domain')
    EndpointDetails_1: Optional[EndpointDetails] = Field(None, alias='EndpointDetails')
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    HostKey_1: Optional[HostKey] = Field(None, alias='HostKey')
    IdentityProviderDetails_1: Optional[IdentityProviderDetails] = Field(
        None, alias='IdentityProviderDetails'
    )
    IdentityProviderType_1: Optional[IdentityProviderType] = Field(
        None, alias='IdentityProviderType'
    )
    LoggingRole: Optional[Role] = None
    PostAuthenticationLoginBanner_1: Optional[PostAuthenticationLoginBanner] = Field(
        None, alias='PostAuthenticationLoginBanner'
    )
    PreAuthenticationLoginBanner_1: Optional[PreAuthenticationLoginBanner] = Field(
        None, alias='PreAuthenticationLoginBanner'
    )
    ProtocolDetails_1: Optional[ProtocolDetails] = Field(None, alias='ProtocolDetails')
    Protocols_1: Optional[Protocols] = Field(None, alias='Protocols')
    SecurityPolicyName_1: Optional[SecurityPolicyName] = Field(
        None, alias='SecurityPolicyName'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WorkflowDetails_1: Optional[WorkflowDetails] = Field(None, alias='WorkflowDetails')


class DecryptStepDetails(BaseModel):
    DestinationFileLocation: InputFileLocation
    Name: Optional[WorkflowStepName] = None
    OverwriteExisting_1: Optional[OverwriteExisting] = Field(
        None, alias='OverwriteExisting'
    )
    SourceFileLocation_1: Optional[SourceFileLocation] = Field(
        None, alias='SourceFileLocation'
    )
    Type: EncryptionType


class DescribeAccessResponse(BaseModel):
    Access: DescribedAccess
    ServerId_1: ServerId = Field(..., alias='ServerId')


class DescribeAgreementResponse(BaseModel):
    Agreement: DescribedAgreement


class DescribeCertificateResponse(BaseModel):
    Certificate: DescribedCertificate


class DescribeConnectorResponse(BaseModel):
    Connector: DescribedConnector


class DescribeHostKeyResponse(BaseModel):
    HostKey: DescribedHostKey


class DescribeProfileResponse(BaseModel):
    Profile: DescribedProfile


class DescribeUserResponse(BaseModel):
    ServerId_1: ServerId = Field(..., alias='ServerId')
    User: DescribedUser


class DescribedExecution(BaseModel):
    ExecutionId_1: Optional[ExecutionId] = Field(None, alias='ExecutionId')
    ExecutionRole: Optional[Role] = None
    InitialFileLocation: Optional[FileLocation] = None
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )
    PosixProfile_1: Optional[PosixProfile] = Field(None, alias='PosixProfile')
    Results: Optional[ExecutionResults] = None
    ServiceMetadata_1: Optional[ServiceMetadata] = Field(None, alias='ServiceMetadata')
    Status: Optional[ExecutionStatus] = None


class DescribedServer(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Certificate_1: Optional[Certificate] = Field(None, alias='Certificate')
    Domain_1: Optional[Domain] = Field(None, alias='Domain')
    EndpointDetails_1: Optional[EndpointDetails] = Field(None, alias='EndpointDetails')
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    HostKeyFingerprint_1: Optional[HostKeyFingerprint] = Field(
        None, alias='HostKeyFingerprint'
    )
    IdentityProviderDetails_1: Optional[IdentityProviderDetails] = Field(
        None, alias='IdentityProviderDetails'
    )
    IdentityProviderType_1: Optional[IdentityProviderType] = Field(
        None, alias='IdentityProviderType'
    )
    LoggingRole: Optional[Role] = None
    PostAuthenticationLoginBanner_1: Optional[PostAuthenticationLoginBanner] = Field(
        None, alias='PostAuthenticationLoginBanner'
    )
    PreAuthenticationLoginBanner_1: Optional[PreAuthenticationLoginBanner] = Field(
        None, alias='PreAuthenticationLoginBanner'
    )
    ProtocolDetails_1: Optional[ProtocolDetails] = Field(None, alias='ProtocolDetails')
    Protocols_1: Optional[Protocols] = Field(None, alias='Protocols')
    SecurityPolicyName_1: Optional[SecurityPolicyName] = Field(
        None, alias='SecurityPolicyName'
    )
    ServerId_1: Optional[ServerId] = Field(None, alias='ServerId')
    State_1: Optional[State] = Field(None, alias='State')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UserCount_1: Optional[UserCount] = Field(None, alias='UserCount')
    WorkflowDetails_1: Optional[WorkflowDetails] = Field(None, alias='WorkflowDetails')


class ListedExecution(BaseModel):
    ExecutionId_1: Optional[ExecutionId] = Field(None, alias='ExecutionId')
    InitialFileLocation: Optional[FileLocation] = None
    ServiceMetadata_1: Optional[ServiceMetadata] = Field(None, alias='ServiceMetadata')
    Status: Optional[ExecutionStatus] = None


class ListedExecutions(RootModel[List[ListedExecution]]):
    root: List[ListedExecution]


class UpdateServerRequest(BaseModel):
    Certificate_1: Optional[Certificate] = Field(None, alias='Certificate')
    EndpointDetails_1: Optional[EndpointDetails] = Field(None, alias='EndpointDetails')
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    HostKey_1: Optional[HostKey] = Field(None, alias='HostKey')
    IdentityProviderDetails_1: Optional[IdentityProviderDetails] = Field(
        None, alias='IdentityProviderDetails'
    )
    LoggingRole: Optional[NullableRole] = None
    PostAuthenticationLoginBanner_1: Optional[PostAuthenticationLoginBanner] = Field(
        None, alias='PostAuthenticationLoginBanner'
    )
    PreAuthenticationLoginBanner_1: Optional[PreAuthenticationLoginBanner] = Field(
        None, alias='PreAuthenticationLoginBanner'
    )
    ProtocolDetails_1: Optional[ProtocolDetails] = Field(None, alias='ProtocolDetails')
    Protocols_1: Optional[Protocols] = Field(None, alias='Protocols')
    SecurityPolicyName_1: Optional[SecurityPolicyName] = Field(
        None, alias='SecurityPolicyName'
    )
    ServerId_1: ServerId = Field(..., alias='ServerId')
    WorkflowDetails_1: Optional[WorkflowDetails] = Field(None, alias='WorkflowDetails')


class WorkflowStep(BaseModel):
    CopyStepDetails_1: Optional[CopyStepDetails] = Field(None, alias='CopyStepDetails')
    CustomStepDetails_1: Optional[CustomStepDetails] = Field(
        None, alias='CustomStepDetails'
    )
    DecryptStepDetails_1: Optional[DecryptStepDetails] = Field(
        None, alias='DecryptStepDetails'
    )
    DeleteStepDetails_1: Optional[DeleteStepDetails] = Field(
        None, alias='DeleteStepDetails'
    )
    TagStepDetails_1: Optional[TagStepDetails] = Field(None, alias='TagStepDetails')
    Type: Optional[WorkflowStepType] = None


class WorkflowSteps(RootModel[List[WorkflowStep]]):
    root: List[WorkflowStep] = Field(..., max_length=8)


class CreateWorkflowRequest(BaseModel):
    Description: Optional[WorkflowDescription] = None
    OnExceptionSteps: Optional[WorkflowSteps] = None
    Steps: WorkflowSteps
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribeExecutionResponse(BaseModel):
    Execution: DescribedExecution
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class DescribeServerResponse(BaseModel):
    Server: DescribedServer


class DescribedWorkflow(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Description: Optional[WorkflowDescription] = None
    OnExceptionSteps: Optional[WorkflowSteps] = None
    Steps: Optional[WorkflowSteps] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WorkflowId_1: Optional[WorkflowId] = Field(None, alias='WorkflowId')


class ListExecutionsResponse(BaseModel):
    Executions: ListedExecutions
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WorkflowId_1: WorkflowId = Field(..., alias='WorkflowId')


class DescribeWorkflowResponse(BaseModel):
    Workflow: DescribedWorkflow
